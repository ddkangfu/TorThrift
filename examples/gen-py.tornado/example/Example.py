#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from tornado import gen
from tornado import stack_context

class Iface(object):
    def add(self, a, b):
        """
        Parameters:
         - a
         - b
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
      self._iprot = self._oprot = iprot
      if oprot is not None:
        self._oprot = oprot
      self._seqid = 0

    @gen.coroutine
    def add(self, a, b):
        """
        Parameters:
         - a
         - b
        """
        self._seqid += 1
        self.send_add(a, b)
        result = yield self.recv_add()
        raise gen.Return(result)

    def send_add(self, a, b):
        self._oprot.writeMessageBegin('add', TMessageType.CALL, self._seqid)
        args = add_args()
        args.a = a
        args.b = b
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    @gen.coroutine
    def recv_add(self):
        (fname, mtype, rseqid) = yield gen.Task(self._iprot.readMessageBegin)
        if mtype == TMessageType.EXCEPTION:
          x = TApplicationException()
          yield gen.Task(x.read, self._iprot)
          yield gen.Task(self._iprot.readMessageEnd)
          raise x
        result = add_result()
        yield gen.Task(result.read, self._iprot)
        yield gen.Task(self._iprot.readMessageEnd)
        if result.success is not None:
          raise gen.Return(result.success)
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add failed: unknown result");


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["add"] = Processor.process_add

    @gen.coroutine
    def process(self, iprot, oprot):
        (name, type, seqid) = yield gen.Task(iprot.readMessageBegin)
        if name not in self._processMap:
            yield gen.Task(iprot.skip,TType.STRUCT)
            yield gen.Task(iprot.readMessageEnd)
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
        else:
            yield gen.Task(self._processMap[name], self, seqid, iprot, oprot)

    @gen.coroutine
    def process_add(self, seqid, iprot, oprot):
        args = add_args()
        yield gen.Task(args.read,iprot)
        yield gen.Task(iprot.readMessageEnd)
        result = add_result()
        result.success = yield gen.Task(self._handler.add, args.a, args.b)
        oprot.writeMessageBegin("add", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class add_args:
    """
    Attributes:
     - a
     - b
    """

    thrift_spec = (
        None, # 0
        (1, TType.I32, 'a', None, None, ), # 1
        (2, TType.I32, 'b', None, None, ), # 2
    )

    def __init__(self, a=None, b=None,):
        self.a = a
        self.b = b

    @gen.coroutine
    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        yield gen.Task(iprot.readStructBegin)
        while True:
            (fname, ftype, fid) = yield gen.Task(iprot.readFieldBegin)
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.a = yield gen.Task(iprot.readI32)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.b = yield gen.Task(iprot.readI32)
                else:
                    yield gen.Task(iprot.skip,ftype)
            else:
                yield gen.Task(iprot.skip,ftype)
            yield gen.Task(iprot.readFieldEnd)
        yield gen.Task(iprot.readStructEnd)

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('add_args')
        if self.a is not None:
            oprot.writeFieldBegin('a', TType.I32, 1)
            oprot.writeI32(self.a)
            oprot.writeFieldEnd()
        if self.b is not None:
            oprot.writeFieldBegin('b', TType.I32, 2)
            oprot.writeI32(self.b)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return


    def __repr__(self):
      L = ['%s=%r' % (key, value)
        for key, value in self.__dict__.iteritems()]
      return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class add_result:
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ), # 0
    )

    def __init__(self, success=None,):
        self.success = success

    @gen.coroutine
    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        yield gen.Task(iprot.readStructBegin)
        while True:
            (fname, ftype, fid) = yield gen.Task(iprot.readFieldBegin)
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = yield gen.Task(iprot.readI32)
                else:
                    yield gen.Task(iprot.skip,ftype)
            else:
                yield gen.Task(iprot.skip,ftype)
            yield gen.Task(iprot.readFieldEnd)
        yield gen.Task(iprot.readStructEnd)

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('add_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return


    def __repr__(self):
      L = ['%s=%r' % (key, value)
        for key, value in self.__dict__.iteritems()]
      return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
